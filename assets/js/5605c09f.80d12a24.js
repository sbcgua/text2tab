"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[951],{6662:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>o,contentTitle:()=>n,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"serialization","title":"Serialization","description":"To do serialization use ZCLTEXT2TABSERIALIZER class. Flat tables and structures are supported. In case of a structure it is serialized as one-line table.","source":"@site/docs/10-serialization.md","sourceDirName":".","slug":"/serialization","permalink":"/text2tab/docs/serialization","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10},"sidebar":"tutorialSidebar","previous":{"title":"Error handling","permalink":"/text2tab/docs/error-handling"},"next":{"title":"Utilities","permalink":"/text2tab/docs/utilities"}}');var a=t(4848),s=t(8453);const l={sidebar_position:10},n="Serialization",o={},d=[{value:"Serialize selected fields",id:"serialize-selected-fields",level:2},{value:"Getting header row only",id:"getting-header-row-only",level:2},{value:"Serialize as HTML",id:"serialize-as-html",level:2}];function c(e){const i={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.header,{children:(0,a.jsx)(i.h1,{id:"serialization",children:"Serialization"})}),"\n",(0,a.jsxs)(i.p,{children:["To do serialization use ",(0,a.jsx)(i.code,{children:"ZCL_TEXT2TAB_SERIALIZER"})," class. Flat tables and structures are supported. In case of a structure it is serialized as one-line table."]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-abap",children:"  data lo_serializer type ref to zcl_text2tab_serializer.\r\n  lo_serializer = zcl_text2tab_serializer=>create(\r\n    \" the below params are all optional and have defaults inside\r\n    i_decimal_sep     = ','\r\n    i_date_format     = 'DMY-'\r\n    i_max_frac_digits = 5         \" For floats only ! not for decimals\r\n    i_use_lf          = abap_true \" to use LF as line-break (not CRLF)\r\n  ).\r\n  \r\n  data lv_string type string.\r\n  lv_string = lo_serializer->serialize( lt_some_table ).\n"})}),"\n",(0,a.jsx)(i.h2,{id:"serialize-selected-fields",children:"Serialize selected fields"}),"\n",(0,a.jsxs)(i.p,{children:["The ",(0,a.jsx)(i.code,{children:"serialize"})," method also accepts ",(0,a.jsx)(i.code,{children:"i_fields_only"})," param - a explicit field list to serialize. You can also pass ",(0,a.jsx)(i.code,{children:"i_keep_order = abap_true"})," to keep serilization order according to the fields only list (by default the order is takes from the data structure)."]}),"\n",(0,a.jsx)(i.h2,{id:"getting-header-row-only",children:"Getting header row only"}),"\n",(0,a.jsxs)(i.p,{children:["The serializer can also create a tab-delimited string with human readable field descriptions or technical names. E.g. ",(0,a.jsx)(i.code,{children:"User Name \\t Date \\t Time"})," (c_header-descriptions) or ",(0,a.jsx)(i.code,{children:"UNAME \\t DATUM \\t UZEIT"})," (c_header-tech_names). This may be useful to prepend the description before the technical fields. To get such a string use method ",(0,a.jsx)(i.code,{children:"serialize_header"}),"."]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-abap",children:"  lv_string = lo_serializer->serialize_header(\r\n    i_header_type = lo_serializer->c_header-descriptions\r\n    i_data = lt_some_table ).\r\n  \" OR\r\n  lv_string = lo_serializer->serialize_header( \r\n    i_data = lt_some_table\r\n    i_header_type = lo_serializer->c_header-descriptions\r\n    i_lang = 'D'\r\n    \" i_keep_order = abap_true \" to respect i_fields_only order\r\n    i_fields_only = value#( ( 'UNAME' ) ( 'DATUM' ) ) ).\n"})}),"\n",(0,a.jsx)(i.h2,{id:"serialize-as-html",children:"Serialize as HTML"}),"\n",(0,a.jsxs)(i.p,{children:["The feature allows serialization to html table ",(0,a.jsx)(i.code,{children:"<table><tr>..."}),'. In particular this form is natively supported when pasted to Excel sheet. And in particular it is possible to mark fields as text, so that no auto conversion happen to the values. E.g. "1.1" is auto converted to a date which is not intended.']}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-abap",children:"  lv_string = lo_serializer->as_html( i_text_fields = value#( ( 'CODE' ) ) )->serialize( lt_some_table ).\n"})}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsxs)(i.em,{children:["To see the impact of modes, check ",(0,a.jsx)(i.code,{children:"ZTEXT2TAB_BACKUP_EXAMPLE"})," - the selection screen allows control over the html/text modes. As well it allows copying the result to the clipboard for pasting to Excel after."]})})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,i,t)=>{t.d(i,{R:()=>l,x:()=>n});var r=t(6540);const a={},s=r.createContext(a);function l(e){const i=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function n(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),r.createElement(s.Provider,{value:i},e.children)}}}]);
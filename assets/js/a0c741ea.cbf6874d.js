"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[17],{2723:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var i=a(4082),n=a(4848),s=a(8453);const r={slug:"tab-delimited-text-parser",title:"Abap tab-delimited text parser",authors:"sbcgua",tags:["old"]},o=void 0,l={authorsImageUrls:[void 0]},d=[{value:"Example",id:"example",level:2},{value:"Unstrict mode",id:"unstrict-mode",level:2},{value:"Use-cases",id:"use-cases",level:2}];function c(e){const t={a:"a",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"I'd like to share a piece of code which might be useful for someone. It is called text2tab (at the time of initial publishing - Abap data parser). Its purpose is parsing of TAB-delimited text into an arbitrary flat structure or internal table. Why TAB-delimited? This is the format which is used automatically if you copy (clipboard) something from Excel - this creates some opportunities for good program usability."}),"\n",(0,n.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,n.jsxs)(t.p,{children:["So what does it do. Let's say we have this data in a form of string (",(0,n.jsx)(t.code,{children:"CRLF"})," as a line delimiter, ",(0,n.jsx)(t.code,{children:"TAB"})," as a field delimiter):"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-text",children:"NAME     BIRTHDATE\r\nALEX     01.01.1990\r\nJOHN     02.02.1995\r\nLARA     03.03.2000\n"})}),"\n",(0,n.jsx)(t.p,{children:"... and a corresponding data type and internal table."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-abap",children:"types: \r\n  begin of my_table_type,\r\n    name      type char10,\r\n    birthdate type datum,\r\n  end of my_table_type.\r\n\r\ndata lt_container type my_table_type.\n"})}),"\n",(0,n.jsx)(t.p,{children:"To parse the string into the container table just add the following code:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-abap",children:"lcl_data_parser=>create( lt_container )->parse(\r\n  exporting i_data      = lv_some_string_with_data\r\n  importing e_container = lt_container ).\n"})}),"\n",(0,n.jsx)(t.h2,{id:"unstrict-mode",children:"Unstrict mode"}),"\n",(0,n.jsxs)(t.p,{children:["The class supports some additional features, in particular, ",(0,n.jsx)(t.strong,{children:"unstrict mode"})," which allow to skip field of the target structure in text - useful when you need to load just several certain fields of a huge data structure (like standard tables in SAP). Let's consider our data type has additional field, unnecessary in the current context:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-abap",children:'types:\r\n  begin of my_table_type,\r\n    name      type char10,\r\n    // highlight-next-line\r\n    city      type char40,   " << New field, but still just 2 in the text\r\n    birthdate type datum,\r\n  end of my_table_type.\r\n...\r\nlcl_data_parser=>create(\r\n    i_pattern       = lt_container       \r\n    i_amount_format = \' .\'         " specify thousand and decimal delimiters\r\n  )->parse(\r\n    exporting\r\n      i_data      = lv_some_string_with_data\r\n      i_strict    = abap_false     " missing city field will not throw an error\r\n      i_has_head  = abap_true      " headers in the first line of the text\r\n    importing\r\n      e_container = lt_container ).\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Another feature: ",(0,n.jsx)(t.code,{children:"i_has_head"})," parameter above means that the first line contains tech names of the fields - then the parser uses it to identify existing fields and their order (which may be flexible then)."]}),"\n",(0,n.jsx)(t.h2,{id:"use-cases",children:"Use-cases"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["We (our company) use the code for some of our company's products - like ",(0,n.jsx)(t.a,{href:"https://vimeo.com/180405740",children:"FI Mass posting tool for SAP"})]}),"\n",(0,n.jsxs)(t.li,{children:["We use it in the ",(0,n.jsx)(t.a,{href:"https://github.com/sbcgua/mockup_loader",children:"mockup loader"})," - another our openly published tool for unit testing (actually the text2tab was a part of mockup loader initially)"]}),"\n",(0,n.jsx)(t.li,{children:"As a tool for mass uploads for custom tables of some other our products (selective backups)"}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["The code is free to use under MIT licence and ca be found in this ",(0,n.jsx)(t.a,{href:"https://github.com/sbcgua/text2tab",children:"github repository"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["Installation can be done with ",(0,n.jsx)(t.a,{href:"https://github.com/abapGit/abapGit",children:"abapGit"})," tool."]}),"\n",(0,n.jsx)(t.p,{children:"I hope you find this useful!"}),"\n",(0,n.jsxs)(t.p,{children:["P.S. ",(0,n.jsxs)(t.em,{children:["Originally posted at ",(0,n.jsx)(t.a,{href:"https://community.sap.com/t5/application-development-and-automation-blog-posts/abap-data-parser-open-source-tab-delimited-text-parser/ba-p/13210322",children:"SAP Community platform"})," on 2016-Aug-28."]})]})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},4082:e=>{e.exports=JSON.parse('{"permalink":"/text2tab/blog/tab-delimited-text-parser","source":"@site/blog/2016-08-28-tab-delimited-text-parser.md","title":"Abap tab-delimited text parser","description":"I\'d like to share a piece of code which might be useful for someone. It is called text2tab (at the time of initial publishing - Abap data parser). Its purpose is parsing of TAB-delimited text into an arbitrary flat structure or internal table. Why TAB-delimited? This is the format which is used automatically if you copy (clipboard) something from Excel - this creates some opportunities for good program usability.","date":"2016-08-28T00:00:00.000Z","tags":[{"inline":false,"label":"old","permalink":"/text2tab/blog/tags/old","description":"Old posts (SAP Community)"}],"readingTime":2.215,"hasTruncateMarker":true,"authors":[{"name":"Alexander Tsybulsky","title":"SAP Consultant, developer, sbcg.com.ua CEO","url":"https://github.com/sbcgua","socials":{"linkedin":"https://www.linkedin.com/in/atsybulsky/","github":"https://github.com/sbcgua"},"imageURL":"https://github.com/sbcgua.png","key":"sbcgua","page":null}],"frontMatter":{"slug":"tab-delimited-text-parser","title":"Abap tab-delimited text parser","authors":"sbcgua","tags":["old"]},"unlisted":false,"prevItem":{"title":"Abap tab-delimited text serializer","permalink":"/text2tab/blog/tab-delimited-text-serializer"}}')},8453:(e,t,a)=>{a.d(t,{R:()=>r,x:()=>o});var i=a(6540);const n={},s=i.createContext(n);function r(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);
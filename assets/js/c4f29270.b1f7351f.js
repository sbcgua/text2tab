"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[18],{592:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"error-handling","title":"Error handling","description":"Error message redefinition","source":"@site/docs/05-error-handling.md","sourceDirName":".","slug":"/error-handling","permalink":"/text2tab/docs/error-handling","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Deep parsing","permalink":"/text2tab/docs/deep-parsing"},"next":{"title":"Serialization","permalink":"/text2tab/docs/serialization"}}');var i=n(4848),o=n(8453);const s={sidebar_position:5},a="Error handling",l={},d=[{value:"Error message redefinition",id:"error-message-redefinition",level:2}];function c(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"error-handling",children:"Error handling"})}),"\n",(0,i.jsx)(r.h2,{id:"error-message-redefinition",children:"Error message redefinition"}),"\n",(0,i.jsxs)(r.p,{children:["The exception class - ",(0,i.jsx)(r.code,{children:"zcx_text2tab_error"})," - exposes ",(0,i.jsx)(r.code,{children:"structure"}),", ",(0,i.jsx)(r.code,{children:"field"}),", ",(0,i.jsx)(r.code,{children:"line"})," and ",(0,i.jsx)(r.code,{children:"msg"})," attributes (and some others). They can be used to reformat the message text if needed. For example:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-abap",children:"  ...\r\n  catch zcx_text2tab_error into lx. \" Reformat to -> Import error at line LINE, field 'FIELD': MSG\r\n    \r\n    l_error_msg = 'Import error'.\r\n    if lx->line is not initial.\r\n      l_error_msg = |{ l_error_msg } at line { lx->line }|.\r\n    endif.\r\n    if lx->field is not initial.\r\n      l_error_msg = |{ l_error_msg }, field '{ lx->field }'|.\r\n    endif.\r\n    l_error_msg = |{ l_error_msg }: { lx->msg }|.\r\n    \r\n    raise exception type lcx_my_program_error\r\n      exporting msg = l_error_msg.\r\n  endtry.\n"})}),"\n",(0,i.jsx)(r.p,{children:"This is supported in parser only at the moment. Serializer does not produce many error on line level."})]})}function p(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>a});var t=n(6540);const i={},o=t.createContext(i);function s(e){const r=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);
"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[527],{5739:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"tab-delimited-text-serializer","metadata":{"permalink":"/text2tab/blog/tab-delimited-text-serializer","source":"@site/blog/2018-09-02-tab-delimited-text-serializer/index.md","title":"Abap tab-delimited text serializer","description":"My first article on this topic was quite a while ago - Abap tab-delimited text parser - Since then I added some improvements to the project.","date":"2018-09-02T00:00:00.000Z","tags":[{"inline":false,"label":"old","permalink":"/text2tab/blog/tags/old","description":"Old posts (SAP Community)"}],"readingTime":2.33,"hasTruncateMarker":true,"authors":[{"name":"Alexander Tsybulsky","title":"SAP Consultant, developer, sbcg.com.ua CEO","url":"https://github.com/sbcgua","socials":{"linkedin":"https://www.linkedin.com/in/atsybulsky/","github":"https://github.com/sbcgua"},"imageURL":"https://github.com/sbcgua.png","key":"sbcgua","page":null}],"frontMatter":{"slug":"tab-delimited-text-serializer","title":"Abap tab-delimited text serializer","authors":"sbcgua","tags":["old"]},"unlisted":false,"nextItem":{"title":"Abap tab-delimited text parser","permalink":"/text2tab/blog/tab-delimited-text-parser"}},"content":"My first article on this topic was quite a while ago - [Abap tab-delimited text parser](/blog/tab-delimited-text-parser) - Since then I added some improvements to the project.\\r\\n\\r\\n## Serializer - new feature\\r\\n\\r\\nThe main new feature is serializing. `ZCL_TEXT2TAB_SERIALIZER` class supports serialization of flat tables and structures. Here is how it works:\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n```abap\\r\\ndata lo_serializer type ref to zcl_text2tab_serializer.\\r\\n\\r\\nlo_serializer = zcl_text2tab_serializer=>create(\\r\\n  \\" the below params are all optional and have defaults inside\\r\\n  i_decimal_sep = \',\'\\r\\n  i_date_format = \'DMY.\'\\r\\n  i_max_frac_digits = 5 \\" For floats only ! not for decimals\\r\\n  i_use_lf = abap_true \\" to use LF as line-break (not CRLF)\\r\\n).\\r\\n\\r\\ndata lv_string type string.\\r\\nlv_string = lo_serializer->serialize( lt_some_table ).\\r\\n```\\r\\n\\r\\nThe produced result would be something like:\\r\\n\\r\\n```text\\r\\nNAME BIRTHDATE\\r\\nALEX 01.01.1990\\r\\nJOHN 02.02.1995\\r\\nLARA 03.03.2000\\r\\n```\\r\\n\\r\\nAs can be seen from the code you can parametrize the date and amount formatting. E.g. for dates you can define the order of day, month and year and the separator symbol (the 4th char of the parameter)\\r\\n\\r\\n## The parser improvements\\r\\n\\r\\nThe parser itself got some improvements\\r\\n\\r\\n- Support for LF line breaks. Before just CRLF was supported, and now it is auto-detected\\r\\n- Support for double quotes around the field value (removed during the parsing)\\r\\n- Support for specifying the date format - same logic like in serializer (e.g. `DMY.` would expect dates like `01.09.2018`)\\r\\n\\r\\n### Type-less parsing\\r\\n\\r\\nThe most noticeable change is type-less parsing. The parsed data is not validated against any specific structure. Instead it just reads the header line and dynamically creates the line structure out of it where each field is string and parsed without additional conversion. For example:\\r\\n\\r\\n```abap\\r\\ndata:\\r\\n  lr_data   type ref to data,\\r\\n  lt_fields type string_table.\\r\\n\\r\\nzcl_text2tab_parser=>create_typeless( )->parse( \\r\\n  exporting \\r\\n    i_data      = my_get_some_raw_text_data( )\\r\\n  importing \\r\\n    e_head_fields = lt_fields  \\" Contain the list of field names\\r\\n    e_container   = lr_data ). \\" The container is created inside the parser\\r\\n```\\r\\n\\r\\n![Debugger view](./tab-delimited-text-serializer-debug.png)\\r\\n\\r\\nThe `e_container` will receive the data ref to the parsed table. For the data example in paragraph 1 the line type would contain respectively 2 fields: `NAME` and `BIRTHDATE` of string type each. The table can be e.g. passed to SALV.\\r\\n\\r\\n## Technical changes\\r\\n\\r\\nIn the previous version the code lived in local classes in includes. Now the classes are global and also changed their names. The product is now called **TEXT2TAB** and not *DATA_PARSER*. Well, that\'s because is not some abstract \'data\' actually but tab-delimited text processor ... and also it is not only the \'parser\' anymore ...\\r\\n\\r\\nThe code is open sourced and can be found in this [github repository](https://github.com/sbcgua/text2tab).\\r\\n\\r\\nThe best way to install the tool would be [abapGit](https://github.com/abapGit/abapGit) - this is an amazing developer tool, if you haven\'t tried it yet, you really should.\\r\\n\\r\\nP.S. *Originally posted at [SAP Community platform](https://community.sap.com/t5/application-development-and-automation-blog-posts/text2tab-tab-delimited-text-parser-and-now-also-serializer/ba-p/13365819) on 2016-Aug-28*"},{"id":"tab-delimited-text-parser","metadata":{"permalink":"/text2tab/blog/tab-delimited-text-parser","source":"@site/blog/2016-08-28-tab-delimited-text-parser.md","title":"Abap tab-delimited text parser","description":"I\'d like to share a piece of code which might be useful for someone. It is called text2tab (at the time of initial publishing - Abap data parser). Its purpose is parsing of TAB-delimited text into an arbitrary flat structure or internal table. Why TAB-delimited? This is the format which is used automatically if you copy (clipboard) something from Excel - this creates some opportunities for good program usability.","date":"2016-08-28T00:00:00.000Z","tags":[{"inline":false,"label":"old","permalink":"/text2tab/blog/tags/old","description":"Old posts (SAP Community)"}],"readingTime":2.215,"hasTruncateMarker":true,"authors":[{"name":"Alexander Tsybulsky","title":"SAP Consultant, developer, sbcg.com.ua CEO","url":"https://github.com/sbcgua","socials":{"linkedin":"https://www.linkedin.com/in/atsybulsky/","github":"https://github.com/sbcgua"},"imageURL":"https://github.com/sbcgua.png","key":"sbcgua","page":null}],"frontMatter":{"slug":"tab-delimited-text-parser","title":"Abap tab-delimited text parser","authors":"sbcgua","tags":["old"]},"unlisted":false,"prevItem":{"title":"Abap tab-delimited text serializer","permalink":"/text2tab/blog/tab-delimited-text-serializer"}},"content":"I\'d like to share a piece of code which might be useful for someone. It is called text2tab (at the time of initial publishing - Abap data parser). Its purpose is parsing of TAB-delimited text into an arbitrary flat structure or internal table. Why TAB-delimited? This is the format which is used automatically if you copy (clipboard) something from Excel - this creates some opportunities for good program usability.\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Example\\r\\n\\r\\nSo what does it do. Let\'s say we have this data in a form of string (`CRLF` as a line delimiter, `TAB` as a field delimiter):\\r\\n\\r\\n```text\\r\\nNAME     BIRTHDATE\\r\\nALEX     01.01.1990\\r\\nJOHN     02.02.1995\\r\\nLARA     03.03.2000\\r\\n```\\r\\n\\r\\n... and a corresponding data type and internal table.\\r\\n\\r\\n```abap\\r\\ntypes: \\r\\n  begin of my_table_type,\\r\\n    name      type char10,\\r\\n    birthdate type datum,\\r\\n  end of my_table_type.\\r\\n\\r\\ndata lt_container type my_table_type.\\r\\n```\\r\\n\\r\\nTo parse the string into the container table just add the following code:\\r\\n\\r\\n```abap\\r\\nlcl_data_parser=>create( lt_container )->parse(\\r\\n  exporting i_data      = lv_some_string_with_data\\r\\n  importing e_container = lt_container ).\\r\\n```\\r\\n\\r\\n## Unstrict mode\\r\\n\\r\\nThe class supports some additional features, in particular, **unstrict mode** which allow to skip field of the target structure in text - useful when you need to load just several certain fields of a huge data structure (like standard tables in SAP). Let\'s consider our data type has additional field, unnecessary in the current context:\\r\\n\\r\\n```abap\\r\\ntypes:\\r\\n  begin of my_table_type,\\r\\n    name      type char10,\\r\\n    // highlight-next-line\\r\\n    city      type char40,   \\" << New field, but still just 2 in the text\\r\\n    birthdate type datum,\\r\\n  end of my_table_type.\\r\\n...\\r\\nlcl_data_parser=>create(\\r\\n    i_pattern       = lt_container       \\r\\n    i_amount_format = \' .\'         \\" specify thousand and decimal delimiters\\r\\n  )->parse(\\r\\n    exporting\\r\\n      i_data      = lv_some_string_with_data\\r\\n      i_strict    = abap_false     \\" missing city field will not throw an error\\r\\n      i_has_head  = abap_true      \\" headers in the first line of the text\\r\\n    importing\\r\\n      e_container = lt_container ).\\r\\n```\\r\\n\\r\\nAnother feature: `i_has_head` parameter above means that the first line contains tech names of the fields - then the parser uses it to identify existing fields and their order (which may be flexible then).\\r\\n\\r\\n## Use-cases\\r\\n\\r\\n- We (our company) use the code for some of our company\'s products - like [FI Mass posting tool for SAP](https://vimeo.com/180405740)\\r\\n- We use it in the [mockup loader](https://github.com/sbcgua/mockup_loader) - another our openly published tool for unit testing (actually the text2tab was a part of mockup loader initially)\\r\\n- As a tool for mass uploads for custom tables of some other our products (selective backups)\\r\\n\\r\\nThe code is free to use under MIT licence and ca be found in this [github repository](https://github.com/sbcgua/text2tab).\\r\\n\\r\\nInstallation can be done with [abapGit](https://github.com/abapGit/abapGit) tool.\\r\\n\\r\\nI hope you find this useful!\\r\\n\\r\\nP.S. *Originally posted at [SAP Community platform](https://community.sap.com/t5/application-development-and-automation-blog-posts/abap-data-parser-open-source-tab-delimited-text-parser/ba-p/13210322) on 2016-Aug-28.*"}]}}')}}]);
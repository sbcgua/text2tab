"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[54],{4280:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"intro","title":"Introduction","description":"Text2tab is an utility to parse TAB-delimited text into an internal table of an arbitrary flat structure.","source":"@site/docs/01-intro.md","sourceDirName":".","slug":"/intro","permalink":"/text2tab/docs/intro","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","next":{"title":"Installation","permalink":"/text2tab/docs/installation"}}');var i=n(4848),a=n(8453);const s={sidebar_position:1},l="Introduction",o={},c=[{value:"Features",id:"features",level:2},{value:"Example of usage",id:"example-of-usage",level:2}];function d(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,i.jsx)(t.p,{children:"Text2tab is an utility to parse TAB-delimited text into an internal table of an arbitrary flat structure."}),"\n",(0,i.jsx)(t.h2,{id:"features",children:"Features"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["supports ",(0,i.jsx)(t.em,{children:"non-strict"})," mode which allows to skip fields in the source data (for the case when only certain fields are being loaded)."]}),"\n",(0,i.jsxs)(t.li,{children:["supports ",(0,i.jsx)(t.em,{children:"corresponding"})," parsing - filling only those fields which are in target structure. Kind of opposite to ",(0,i.jsx)(t.em,{children:"non-strict"})," feature above."]}),"\n",(0,i.jsxs)(t.li,{children:["supports ",(0,i.jsx)(t.em,{children:"header"})," specification as the first line in the text - in this case field order in the text may differ from the internal abap structure field order."]}),"\n",(0,i.jsx)(t.li,{children:"supports loading into a structure (the first data line of the text is parsed)."}),"\n",(0,i.jsxs)(t.li,{children:["supports ",(0,i.jsx)(t.em,{children:"type-less"})," parsing, when the data is not checked against existing structure but dynamically create as a table with string fields."]}),"\n",(0,i.jsx)(t.li,{children:"supports specifying date and amount formats"}),"\n",(0,i.jsxs)(t.li,{children:["supports on-the-fly field name remapping (e.g. field ",(0,i.jsx)(t.code,{children:"FOO"})," in the parsed text move to ",(0,i.jsx)(t.code,{children:"BAR"})," component of the target internal table)"]}),"\n",(0,i.jsxs)(t.li,{children:["supports ",(0,i.jsx)(t.em,{children:"deep"})," parsing - filling structure or table components in the target data container"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["And vice versa - ",(0,i.jsx)(t.strong,{children:"serialize"})," a flat table or structure to text."]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"supports specifying date and amount formats, and line-break symbol"}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["The package also contains 2 ",(0,i.jsx)(t.strong,{children:"examples"}),":"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"ZTEXT2TAB_EXAMPLE"})," - simple parsing code"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"ZTEXT2TAB_BACKUP_EXAMPLE"})," - example of DB table backup with serializer"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"example-of-usage",children:"Example of usage"}),"\n",(0,i.jsx)(t.p,{children:"Source text file (CRLF as a line delimiter, TAB as a field delimiter)"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-text",children:"NAME     BIRTHDATE\r\nAlex     01.01.1990\r\nJohn     02.02.1995\r\nLara     03.03.2000\n"})}),"\n",(0,i.jsx)(t.p,{children:"Simple parsing code"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-abap",children:"types:\r\n  begin of my_table_type,\r\n    name      type char10,\r\n    birthdate type datum,\r\n  end of my_table_type.\r\n\r\ndata lt_container type my_table_type.\r\n\r\nzcl_text2tab_parser=>create( lt_container )->parse(\r\n  exporting\r\n    i_data      = get_raw_text_data_above( )\r\n  importing\r\n    e_container = lt_container ).\n"})}),"\n",(0,i.jsx)(t.p,{children:"... or a more complex one ..."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-abap",children:'types:\r\n  begin of my_table_type,\r\n    name      type char10,\r\n    city      type char40, " <<< New field, but the text still contains just 2 !\r\n    birthdate type datum,\r\n  end of my_table_type.\r\n\r\n...\r\n\r\nzcl_text2tab_parser=>create(\r\n    i_pattern       = lt_container   " table or structure\r\n    i_amount_format = \' .\'           " specify thousand and decimal delimiters\r\n  )->parse( \r\n    exporting \r\n      i_data      = get_some_raw_text_data( )\r\n      i_strict    = abap_false       " text may contain not all fields ("city" field will be skipped)\r\n      i_has_head  = abap_true        " headers in the first line of the text\r\n    importing \r\n      e_container = lt_container ).  " table or structure (first data line from text)\n'})}),"\n",(0,i.jsxs)(t.p,{children:["You can keep the object reference returned by ",(0,i.jsx)(t.code,{children:"create()"})," and use it to parse more data of the same pattern."]})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>l});var r=n(6540);const i={},a=r.createContext(i);function s(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);